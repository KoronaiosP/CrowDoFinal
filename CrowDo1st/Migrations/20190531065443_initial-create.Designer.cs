// <auto-generated />
using System;
using CrowDo1st;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CrowDo1st.Migrations
{
    [DbContext(typeof(CrowDoDbContext))]
    [Migration("20190531065443_initial-create")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CrowDo1st.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CrowDo1st.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<decimal>("LowerBound");

                    b.Property<int?>("ProjectProfilePageId");

                    b.Property<string>("Reward");

                    b.Property<string>("Title");

                    b.HasKey("PackageId");

                    b.HasIndex("ProjectProfilePageId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("CrowDo1st.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectProfilePageId");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProjectProfilePageId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CrowDo1st.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectProfilePageId");

                    b.Property<int>("CategoryId");

                    b.Property<int?>("ProjectProfilePageId1");

                    b.HasKey("ProjectProfilePageId", "CategoryId");

                    b.HasAlternateKey("ProjectProfilePageId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProjectProfilePageId1");

                    b.ToTable("ProjectCategory");
                });

            modelBuilder.Entity("CrowDo1st.ProjectProfilePage", b =>
                {
                    b.Property<int>("ProjectProfilePageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<decimal>("Balance");

                    b.Property<string>("Category");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CreatorUserId");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DeadLine");

                    b.Property<string>("Description");

                    b.Property<decimal>("Goal");

                    b.Property<string>("Title");

                    b.Property<int>("ViewsCounter");

                    b.HasKey("ProjectProfilePageId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("ProjectProfilePage");
                });

            modelBuilder.Entity("CrowDo1st.Updates", b =>
                {
                    b.Property<int>("UpdatesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("DescriptionOfUpdate");

                    b.Property<int?>("ProjectProfilePageId");

                    b.Property<string>("Title");

                    b.HasKey("UpdatesId");

                    b.HasIndex("ProjectProfilePageId");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("CrowDo1st.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activity");

                    b.Property<string>("CardNumber");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfRegister");

                    b.Property<string>("Email");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("ViewsCounter");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrowDo1st.UserProject", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProjectProfilePageId");

                    b.HasKey("UserId", "ProjectProfilePageId");

                    b.HasIndex("ProjectProfilePageId");

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("CrowDo1st.Videos", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectProfilePageId");

                    b.HasKey("VideoId");

                    b.HasIndex("ProjectProfilePageId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("CrowDo1st.Package", b =>
                {
                    b.HasOne("CrowDo1st.ProjectProfilePage", "Project")
                        .WithMany("Packages")
                        .HasForeignKey("ProjectProfilePageId");
                });

            modelBuilder.Entity("CrowDo1st.Photos", b =>
                {
                    b.HasOne("CrowDo1st.ProjectProfilePage")
                        .WithMany("Photos")
                        .HasForeignKey("ProjectProfilePageId");
                });

            modelBuilder.Entity("CrowDo1st.ProjectCategory", b =>
                {
                    b.HasOne("CrowDo1st.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDo1st.ProjectProfilePage", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectProfilePageId1");
                });

            modelBuilder.Entity("CrowDo1st.ProjectProfilePage", b =>
                {
                    b.HasOne("CrowDo1st.Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CrowDo1st.User", "Creator")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("CrowDo1st.Updates", b =>
                {
                    b.HasOne("CrowDo1st.ProjectProfilePage")
                        .WithMany("Update")
                        .HasForeignKey("ProjectProfilePageId");
                });

            modelBuilder.Entity("CrowDo1st.UserProject", b =>
                {
                    b.HasOne("CrowDo1st.ProjectProfilePage", "Project")
                        .WithMany("UserProject")
                        .HasForeignKey("ProjectProfilePageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrowDo1st.User", "user")
                        .WithMany("UserProject")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrowDo1st.Videos", b =>
                {
                    b.HasOne("CrowDo1st.ProjectProfilePage")
                        .WithMany("Videos")
                        .HasForeignKey("ProjectProfilePageId");
                });
#pragma warning restore 612, 618
        }
    }
}
